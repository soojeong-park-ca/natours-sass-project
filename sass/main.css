@keyframes moveInFromLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes moveInFromRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes moveInFromBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1rem;
  line-height: 1.7;
  color: #777;
  padding: 1.875em;
  /* ems can be useful if I want to define certain properties of an element (like padding) relative to its own font size */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 60px;
}
.heading-primary--main {
  display: block;
  font-size: 3.75rem;
  font-weight: 400;
  letter-spacing: 35px;
  padding-left: 35px;
  animation: moveInFromLeft 1s ease-out;
}
.heading-primary--sub {
  display: block;
  font-size: 1.25rem;
  font-weight: 700;
  letter-spacing: 17.4px;
  padding-left: 17.4px;
  animation: moveInFromRight 1s ease-out;
}

.btn:link,
.btn:visited {
  display: inline-block;
  position: relative;
  text-decoration: none;
  text-transform: uppercase;
  border-radius: 100px;
  transition: all 0.2s;
  padding: 14px 40px;
}
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}
.btn--white {
  background: #fff;
  color: #777;
}
.btn--white::after {
  background-color: #fff;
}
.btn--animated {
  animation: moveInFromBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
}
.btn::after {
  content: "";
  display: inline-block;
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 100px;
  top: 0;
  left: 0;
  transition: all 0.4s;
  z-index: -1;
}

.header {
  position: relative;
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}
.header__logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
  height: 2.2rem;
}
.header__logo {
  height: 100%;
}
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.row {
  max-width: 71.25rem;
  background-color: #eee;
  margin: 0 auto;
}
.row:not(:last-child) {
  margin-bottom: 5rem;
}
.row::after {
  content: "";
  display: table;
  clear: both;
}
.row [class^="col-"] {
  background-color: orangered;
  float: left;
}
.row [class^="col-"]:not(:last-child) {
  margin-right: 3.75rem;
}
.row .col-1-of-2 {
  width: calc((100% - 3.75rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 2 * 3.75rem) / 3);
}
.row .col-1-of-4 {
  width: calc((100% - 3 * 3.75rem) / 4);
}
.row .col-2-of-3 {
  width: calc(2 * ((100% - 2 * 3.75rem) / 3) + 3.75rem);
}
.row .col-2-of-4 {
  width: calc(2 * ((100% - 3 * 3.75rem) / 4) + 3.75rem);
}
.row .col-3-of-4 {
  width: calc(3 * ((100% - 3 * 3.75rem) / 4) + 2 * 3.75rem);
} /*# sourceMappingURL=main.css.map */
